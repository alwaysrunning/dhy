/**
 * Created with WebStorm.
 * User: rico sky@note520.com
 * Date: 2016/2/18
 * Time: 14:45
 * 服务器日志模块封装
 * */
'use strict';
var path = require("path");
var fs = require("fs");
var log4js = require("log4js");
var extend = require('node.extend');
/**
 * 日志参数
 */
var defaultConf = {
    "appenders": [
        {
            "type": "console",
            "category": "console"
        }, {
            "type": "dateFile",
            "filename": "logs/",
            "pattern": "clintLogs/clintReq-yyyy-MM-dd.log",
            "alwaysIncludePattern": true,
            "maxLogSize": 1,
            "backups": 5,
            "category": ["clintReqInfo"]
        }, {
            "type": "dateFile",
            "filename": "logs/",
            "pattern": "serverLogs/serverRes-yyyy-MM-dd.log",
            "alwaysIncludePattern": true,
            "maxLogSize": 1024,
            "backups": 5,
            "category": ["console"]
        }, {
            "type": "dateFile",
            "filename": "logs/",
            "pattern": "errLogs/err-yyyy-MM-dd.log",
            "alwaysIncludePattern": true,
            "maxLogSize": 1024,
            "backups": 5,
            "category": ["err"]
        }
    ],
    "levels": {
        "clintReqInfo": "INFO",
        "serverResInfo": "INFO",
        "err": "ERROR"
    },
    "replaceConsole": true
};

var Conf = extend(true, {}, defaultConf);

/**
 * 日志手动配置
 */
exports.configure = function (config) {
    if (config) {
        Conf = extend(true, Conf, config);
    }
    log4js.configure(Conf);
};

/**
 * 暴露到应用的日志接口，调用该方法前必须确保已经configure过
 * @param name 指定log4js配置文件中的category。依此找到对应的appender。
 *              如果appender没有写上category，则为默认的category。可以有多个
 * @returns {Logger}
 */
exports.logger = function (name) {
    var dateFileLog = log4js.getLogger(name);
    dateFileLog.setLevel(log4js.levels.INFO);
    return dateFileLog;
};

/**
 * 用于express中间件，调用该方法前必须确保已经configure过
 * logDebug: "DEBUG",
 " logInfo: "INFO",
 " logWarn: "WARN",
 " logErr: "ERROR"
 * @returns {Function|*}
 */
exports.useLog = function (levelAgr, dateFileLog) {
    var _levelAgr = levelAgr || "INFO", _dateFileLog = dateFileLog || "clintReqInfo";
    var logger4 = log4js.getLogger(_dateFileLog);
    //console.warn(log4js.levels);
    logger4.setLevel(_levelAgr);
    return log4js.connectLogger(logger4);//"auto" log4js.levels.INFO  {level:_levelAgr}
};
/**
 * 手动记录日志类型
 * logCate: 日志分类名称,
 * @returns {Function|*}
 */
exports.recordCate = function (logCate, setting) {
    if (setting) {
        log4js.configure(setting);
    } else {
        log4js.configure(Conf);
    }
    return log4js.getLogger(logCate);
};