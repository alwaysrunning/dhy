/**
 * Created by 沐沐 on 2015-08-21.
 * 地区接口
 */

var request = require('./request');
var conf = require('../conf');
var error = require('../error');
var http = require('http');
var q = require('q');

/**
 * 根据坐标向baidu查询城市信息
 * @param lat
 * @param lng
 * @returns {*|promise}
 */
var getCity = function (lat, lng) {
    var deferred = q.defer();
    if (lat && lng) {
        http.get('http://api.map.baidu.com/geocoder/v2/?ak=' + conf().baidu.ak + '&location=' +
            lat + ',' + lng + '&output=json&coordtype=wgs84ll', function (res) {
            var chunk = '';
            res.setEncoding('utf8');
            res.on('data', function (data) {
                chunk += data;
            });
            res.on('end', function () {
                if (res.statusCode === 200) {
                    var data = JSON.parse(chunk);
                    conf().api.printLog && console.log('返回结果:' + JSON.stringify(data));
                    if (data.status === 0) {
                        deferred.resolve(data);
                    } else {
                        deferred.reject(new error.ApiError(data.status, data.msg));
                    }
                } else {
                    deferred.reject(new error.SystemError(res.statusCode, res.statusMessage));
                }
            });
        }).on('error', function (err) {
            deferred.reject(err);
        });
    } else {
        deferred.reject(new error.ApiError('9999', '定位失败'));
    }
    return deferred.promise;
};

//缓存服务端城市列表
var regionCache = null;
var saveRegion = function (region) {
    region.createTime = parseInt(new Date().getTime() / 1000);
    regionCache = region;
    return region;
};

var readRegion = function () {
    var deferred = q.defer();
    if (regionCache) {
        if (regionCache.createTime) {
            var now = parseInt(new Date().getTime() / 1000);
            var time = now - regionCache.createTime;
            if (time > 86400) {
                getRegion().then(deferred.resolve);
            } else {
                regionCache.left = time;
                deferred.resolve(regionCache);
            }
        } else {
            getRegion().then(deferred.resolve);
        }
    } else {
        getRegion().then(deferred.resolve);
    }
    return deferred.promise;
};

var getRegion = function () {
    return request.get({
        method: 'bubugao.mobile.region.getChildren'
    }).then(saveRegion);
};

/**
 * 根据地理代码查询城市
 * @param parentid
 * @param tree
 * @returns {promise}
 */
module.exports.getRegionByCode = function (parentid, tree) {
    return request.get({
        method: 'bubugao.mobile.areas.get',
        parentid: parentid || 0,
        tree: tree || 4
    });
};
/**
 * 查询所有城市
 * @returns {promise}
 */
module.exports.getRegionAll = function () {
    return request.get({
        method: 'bubugao.mobile.area.get'
    });
};

var getArea = function (address, region) {
    if (region) {
        var province = region.filter(function (childRegion) {
            return address.province.replace('省', '') === childRegion.name
        });
        var city = province.length ? (province[0].children.filter(function (childRegion) {
            return address.city === childRegion.name;
        })) : null;
        return city && city[0];
    } else {
        return null
    }
};

/**
 * 根据经纬度获得城市信息
 * @param lat
 * @param lng
 * @returns {*}
 */
module.exports.location = function (lat, lng) {
    return q.all([
        getCity(lat, lng),
        readRegion()
    ]).spread(function (address, region) {
        return {
            code: '0000',
            data: {
                city: address.result.addressComponent.city,
                find: getArea(address.result.addressComponent, region.data.v)
            }
        };
    });
};

/**
 * 地理列表
 * @returns {*}
 */
module.exports.area = function () {
    return readRegion().then(function (region) {
        return {
            code: '0000',
            data: region.data.v
        }
    });
};