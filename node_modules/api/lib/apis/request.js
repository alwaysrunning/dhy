/**
 * Created by 沐沐 on 2015-07-16.
 * 调用接口合并
 */
var http = require('http');
var queryString = require('querystring');
var q = require('q');
var conf = require('../conf');
var sign = require('./sign'); //app接口效验加密模块
var weixin = require('../weixin/index');
var error = require('../error');
var iconv = require('iconv-lite');
var logs = require('logs').logs;
var logsErr = logs.recordCate("err");//记录错误
var needle = require('needle');

function convertUrl(url) {
    var reg = /(\%\S\S)+/gi;
    var decodeStr = function (str) {
        var arr = str.split('%');
        arr.shift();
        var buf = new Buffer(arr.length);
        arr.forEach(function (hex, i) {
            var v = parseInt(hex, 16);
            buf[i] = v;
        });
        return iconv.decode(buf, 'gbk');
    };
    var _urlMatch = url.match(reg);
    if (_urlMatch) {
        var result = _urlMatch.sort().reverse();
        result.forEach(function (str) {
            url = url.replace(str, decodeStr(str));
        });
    }
    return url
}

/**
 * 用微信id换取token和secret
 * @param {string} unionid
 * @returns {{token: string, secret: string}}
 */
var getToken = function (unionid) {
    var config = conf();
    //console.log(config);
    if (!config.api.autoToken) {
        return sendRequest({
            method: 'bubugao.mobile.user.weixin.token',
            unionId: unionid
        }).then(function (data) {
            return data.data;
        }).fail(function (err) {
            if (err.code === '0001') {
                err.message = '您尚未登录,请先登陆';
                err.code = '200010002';
            }
            throw err;
        });
    } else {
        return q.fcall(function () {
            return {
                tokenId: config.api.testTokens.tokenId,
                secret: config.api.testTokens.secret
            };
        });
    }
};
/**
 * //todo mark 计算密匙
 * @param {object} parmas 所有请求参数
 * @param {string} token 用户token
 * @param {string} secret 用户秘钥
 * @returns {{token: String, timestamp: number, sign: String}}
 */
var getHeaders = function (parmas, token, secret) {
    var timestamp = Math.round(Date.now());
    var signString = sign(parmas, secret, timestamp);
    return {
        appId: 1,
        bundleId: 'html5',
        sign: signString,
        token: token,
        timestamp: timestamp,
        ver: conf().api.ver
    };
};

/**
 * 平台标识
 * @type {string}
 */
var bundleId = 'html5';

/**
 * //todo mark 发送api转发请求
 * @param {object} parmas
 * @param {object} headers
 * @returns {promise}
 */
var sendRequest = function (parmas, headers, iconvBool) {
    var timeoutEventId;
    var timeout = conf().api.timeout || 30000;
    var deferred = q.defer();
    var path = headers ? conf().api.authPath : conf().api.path;
    var isIconvBool = iconvBool || false;
    var tmpUrl = queryString.stringify(JSON.parse(JSON.stringify(parmas)));
    if (isIconvBool) {
        path += '?' + convertUrl(tmpUrl);
    } else {
        path += '?' + tmpUrl;
    }
    var url = 'http://' + conf().api.host + (conf().api.port ? ':' + conf().api.port : '') + path;
    var options = {
        //host: conf().api.host,
        //port: conf().api.port,
        //path: path,
        timeout: timeout
    };

    if (headers) {
        options['headers'] = headers;
    } else {
        options['headers'] = {
            bundleId: bundleId,
            ver: conf().api.ver
        }
    }

    needle.get(url, options, function (err, res, body) {
        if (err) {
            conf().api.printLog && console.warn('返回网络报错[' + path + ']:' + err.message);
            conf().api.printLog && logsErr.error('返回网络报错[' + path + ']:' + err.message);
            var syerr = new error.SystemError(err.code, err.message, path);
            syerr.data = err;
            deferred.reject(syerr);
        } else {
            if (res.statusCode === 200) {
                if (body.code !== '0000') {
                    conf().api.printLog && console.warn('返回API业务报错[' + conf().api.host+":"+conf().api.port  +" 返回状态码: "+ body.code + '][' + path + ']:' + JSON.stringify(body));
                    conf().api.printLog && logsErr.error('返回API业务报错[' + conf().api.host+":"+conf().api.port  +" 返回状态码: "+ body.code + '][' + path + ']:' + JSON.stringify(body));
                    deferred.reject(new error.ApiError(body.code, body.message, body.data));
                } else {
                    conf().api.printLog && console.log('返回结果[' + conf().api.host+":"+conf().api.port  + path + ']:' + JSON.stringify(body));
                    deferred.resolve(body);
                }
            } else {
                conf().api.printLog && console.warn('返回API服务器报错[' + conf().api.host+":"+conf().api.port  +" 返回状态码: "+ res.statusCode + '][' + path + ']:' + res.statusMessage);
                conf().api.printLog && logsErr.error('返回API服务器报错[' + conf().api.host+":"+conf().api.port  +" 返回状态码: "+ res.statusCode + '][' + path + ']:' + res.statusMessage);
                deferred.reject(new error.SystemError(res.statusCode, res.statusMessage, path));
            }
        }
    });

    //var req = http.get(options, function (res) {
    //    var chunk = '';
    //    res.setEncoding('utf8');
    //    res.on('data', function (data) {
    //        chunk += data;
    //    });
    //    res.on('end', function () {
    //        clearTimeout(timeoutEventId);
    //        if (res.statusCode === 200) {
    //            var data = JSON.parse(chunk);
    //            if (data.code !== '0000') {
    //                conf().api.printLog && logsErr.error('返回API业务报错[' + data.code + '][' + path + ']:' + data.message);
    //                deferred.reject(new error.ApiError(data.code, data.message, data.data));
    //            } else {
    //                conf().api.printLog && console.log('返回结果[' + path + ']:' + JSON.stringify(data));
    //                deferred.resolve(data);
    //            }
    //        } else {
    //            conf().api.printLog && logsErr.error('返回API服务器报错[' + res.statusCode + '][' + path + ']:' + res.statusMessage);
    //            deferred.reject(new error.SystemError(res.statusCode, res.statusMessage, path));
    //        }
    //    });
    //    res.on('close', function () {
    //        clearTimeout(timeoutEventId);
    //    });
    //}).on('error', function (err) {
    //    conf().api.printLog && logsErr.error('返回网络报错[' + path + ']:' + err.message);
    //    var syerr = new error.SystemError(err.code, err.message, path);
    //    syerr.data = err;
    //    deferred.reject(syerr);
    //}).on('timeout', function (err) {
    //    conf().api.printLog && logsErr.error('返回网络超时[' + path + ']:' + err.message);
    //    var syerr = new error.SystemError(err.code, err.message, path);
    //    req.abort();
    //    deferred.reject(syerr);
    //});
    //
    //timeoutEventId = setTimeout(function () {
    //    req.emit('timeout', {
    //        message: '请求超时',
    //        code: 408
    //    });
    //}, timeout);

    return deferred.promise;
};

/**
 * 发送post请求
 * @param parmas
 * @param postData
 * @param headers
 * @param multipart
 * @returns {promise}
 */
var postRequest = function (parmas, postData, headers, multipart) {
    var timeout = conf().api.timeout || 30000;
    var deferred = q.defer();

    if (arguments.length == 3) {
        multipart = headers;
        headers = null;
    }

    var path = headers ? conf().api.authPath : conf().api.path;
    path += '?' + queryString.stringify(JSON.parse(JSON.stringify(parmas)));
    var url = conf().api.host + (conf().api.port ? ':' + conf().api.port : '') + path;
    var options = {
        multipart: !!multipart,
        timeout: timeout
    };
    if (headers) {
        options['headers'] = headers;
    } else {
        options['headers'] = {
            bundleId: bundleId,
            ver: conf().api.ver
        }
    }

    needle.post(url, postData, options, function (err, res, body) {
        if (err) {
            conf().api.printLog && console.warn('返回网络报错[' + path + ']:' + err.message);
            conf().api.printLog && logsErr.error('返回网络报错[' + path + ']:' + err.message);
            var syerr = new error.SystemError(err.code, err.message, path);
            syerr.data = err;
            deferred.reject(syerr);
        } else {
            if (res.statusCode === 200) {
                if (body.code !== '0000') {
                    conf().api.printLog && console.warn('返回API业务报错[' + conf().api.host+":"+conf().api.port  +" 返回状态码: "+ body.code + '][' + path + ']:' + JSON.stringify(body));
                    conf().api.printLog && logsErr.error('返回API业务报错[' + conf().api.host+":"+conf().api.port  +" 返回状态码: "+ body.code + '][' + path + ']:' + JSON.stringify(body));
                    deferred.reject(new error.ApiError(body.code, body.message, body.data));
                } else {
                    conf().api.printLog && console.log('返回结果[' + conf().api.host+":"+conf().api.port + path + ']:' + JSON.stringify(body));
                    deferred.resolve(body);
                }
            } else {
                conf().api.printLog && console.warn('返回API服务器报错[' + conf().api.host+":"+conf().api.port +" 返回状态码: "+ res.statusCode + '][' + path + ']:' + res.statusMessage);
                conf().api.printLog && logsErr.error('返回API服务器报错[' + conf().api.host+":"+conf().api.port +" 返回状态码: "+ res.statusCode + '][' + path + ']:' + res.statusMessage);
                deferred.reject(new error.SystemError(res.statusCode, res.statusMessage, path));
            }

        }
    });
    return deferred.promise;
};
//var postRequest = function (parmas, postData, headers) {
//    var timeoutEventId;
//    var timeout = conf().api.timeout || 30000;
//    var deferred = q.defer();
//    var path = headers ? conf().api.authPath : conf().api.path;
//    path += '?' + queryString.stringify(parmas);
//    var options = {
//        host: conf().api.host,
//        port: conf().api.port,
//        path: path,
//        method: 'POST'
//    };
//    if (headers) {
//        options['headers'] = headers;
//    } else {
//        options['headers'] = {
//            bundleId: bundleId,
//            ver: conf().api.ver
//        }
//    }
//    var req = http.request(options, function (res) {
//        var chunk = '';
//        res.setEncoding('utf8');
//        res.on('data', function (data) {
//            chunk += data;
//        });
//        res.on('end', function () {
//            clearTimeout(timeoutEventId);
//            if (res.statusCode === 200) {
//                var data = JSON.parse(chunk);
//                if (data.code !== '0000') {
//                    conf().api.printLog && logsErr.error('返回API业务报错[' + data.code + '][' + path + ']:' + data.message);
//                    deferred.reject(new error.ApiError(data.code, data.message, data.data));
//                } else {
//                    conf().api.printLog && console.log('返回结果[' + path + ']:' + JSON.stringify(data));
//                    deferred.resolve(data);
//                }
//            } else {
//                conf().api.printLog && logsErr.error('返回API服务器报错[' + res.statusCode + '][' + path + ']:' + res.statusMessage);
//                deferred.reject(new error.SystemError(res.statusCode, res.statusMessage, path));
//            }
//        });
//        res.on('close', function () {
//            clearTimeout(timeoutEventId);
//        });
//    }).on('error', function (err) {
//        conf().api.printLog && logsErr.error('返回网络报错[' + path + ']:' + err.message);
//        var syerr = new error.SystemError(err.code, err.message, path);
//        syerr.data = err;
//        deferred.reject(syerr);
//    }).on('timeout', function (err) {
//        conf().api.printLog && logsErr.error('返回网络超时[' + path + ']:' + err.message);
//        var syerr = new error.SystemError(err.code, err.message, path);
//        req.abort();
//        deferred.reject(syerr);
//    });
//
//    req.write(queryString.stringify(postData) + "\n");
//    req.end();
//
//    timeoutEventId = setTimeout(function () {
//        req.emit('timeout', {
//            message: 'API超时',
//            code: 408
//        });
//    }, timeout);
//
//    return deferred.promise;
//};

/**
 * 转发普通请求
 * @param parmas
 * @returns {promise}
 */
module.exports.get = function (parmas, iconvBool) {
    return sendRequest(parmas, null, iconvBool);
};

/**
 * 转发post请求
 * @param parmas
 * @param data
 * @returns {promise}
 */
module.exports.post = function (parmas, data, multipart) {
    return postRequest(parmas, data, multipart);
};


/**
 * //todo mark 转发用户验证权限请求
 * @param parmas
 * @param tokens
 * @returns {promise}
 */
module.exports.getAuth = function (parmas, tokens) {
    if (tokens) {
        return q.fcall(getHeaders, parmas, tokens.tokenId, tokens.secret)
            .then(function (headers) {
                return sendRequest(parmas, headers);
            });
    } else {
        return q.fcall(function () {
            throw new error.ApiError('1100', '缺少验证参数');
        });
    }
};

/**
 * 转发用户验证post请求
 * @param parmas
 * @param data
 * @param tokens
 * @returns {promise}
 */
module.exports.postAuth = function (parmas, data, tokens, multipart) {
    return q.fcall(getHeaders, parmas, tokens.tokenId, tokens.secret)
        .then(function (headers) {
            return postRequest(parmas, data, headers, multipart);
        });
};

/**
 * 通过网页授权拉取用户信息
 * @param {string} code
 * @returns {promise}
 */
module.exports.getUserInfoTemp = function (code) {
    return weixin.open_id(code).then(function (data) {
        if (conf().weixin.ignore) {
            return data
        } else {
            return weixin.user_info_temp(data.access_token, data.openid);
        }
    });
};

/**
 * 通过公众号授权拉取用户信息
 * @param {string} code
 * @returns {promise}
 */
module.exports.getUserInfo = function (code) {
    return q.all([weixin.access_token(), weixin.open_id(code)]).spread(function (access, openid) {
        if (conf().weixin.ignore) {
            return openid
        } else {
            return weixin.user_info(access.access_token, openid.openid);
        }
    });
};

/**
 * 获得验签参数
 * @param {string|object} tokenOrUnionid
 * @param {string|object} tokenid  // 超级app登录 会有特殊的tokenid值
 * @returns {{token: string, secret: string}}
 */
module.exports.getTokens = function (tokenOrUnionid, tokenid) {
    var config = conf();
    var tokenid = tokenid || '';

    //  如果是从超级app登录，直接把密钥写死
    //  超级app登录的用户的tokenid前缀带有superapp
    if(tokenid && tokenid !== undefined && /superapp/ig.test(tokenid)){
        return q.fcall(function () {
            return {
                tokenId: tokenid,
                secret: 'f11e7e62406056aaec459ee94bb7b430'
            };
        });
    }

    if ((tokenOrUnionid && tokenOrUnionid !== undefined) || config.api.autoToken) {
        if (typeof tokenOrUnionid == 'string' && tokenOrUnionid !== 'undefined') {
            return getToken(tokenOrUnionid);
        } else {
            return q.fcall(function () {
                if (config.api.autoToken) {
                    return config.api.testTokens
                } else {
                    return tokenOrUnionid;
                }
            });
        }
    } else {
        return q.fcall(function () {
            throw new error.ApiError('9999', '缺少微信权限参数');
        })
    }
};
